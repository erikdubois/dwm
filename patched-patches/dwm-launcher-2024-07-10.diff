--- config.def.h.orig	2024-07-10 11:52:03.949978765 +0200
+++ config.def.h	2024-07-10 11:52:03.949978765 +0200
@@ -40,6 +40,33 @@
 
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+//static char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };
+//static char *tags[] = { "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X" };
+//static char *tags[] = { "", "", "", "", "", "", "", "", "", "" };
+//static char *tags[] = { "Web", "Chat", "Edit", "Meld", "Vb", "Mail", "Video", "Image", "Files", "Music" };
+//static char *tags[] = {"一", "二", "三", "四", "五", "六", "七", "八", "九", "十"};
+
+
+/* launcher commands (They must be NULL terminated) */
+static const char* firefox[] = { "firefox", NULL };
+static const char* vivaldi[] = { "vivaldi", NULL };
+static const char* brave[] = { "brave", "open" , "brave", NULL };
+static const char* discord[] = { "discord", "open" , "discord", NULL };
+static const char* telegram[] = { "telegram-desktop", "open" , "telegram-desktop", NULL };
+static const char* mintstick[] = { "mintstick", "-m", "iso", NULL};
+static const char* pavucontrol[] = { "pavucontrol", NULL };
+
+static const Launcher launchers[] = {
+    /* command     name to display */
+
+    { discord,       "ﱲ" },
+    { firefox,       "" },
+    { brave,         "數" },
+    { mintstick,     "虜" },
+    { pavucontrol,   "墳" },
+    { telegram,      "" },
+    { vivaldi,       "" },
+};
 
 static const Rule rules[] = {
 	/* xprop(1):
--- dwm.c.orig	2024-07-10 11:52:03.949978765 +0200
+++ dwm.c	2024-07-10 11:52:03.949978765 +0200
@@ -151,6 +151,11 @@
 	int monitor;
 } Rule;
 
+typedef struct {
+	const char** command;
+	const char* name;
+} Launcher;
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -468,18 +473,38 @@
 		if (i < LENGTH(tags) && showtags) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
-		} else if (ev->x < x + TEXTW(selmon->ltsymbol) && showlayout)
+			goto execute_handler;
+		} else if (ev->x < x + TEXTW(selmon->ltsymbol) && showlayout) {
 			click = ClkLtSymbol;
-		else if (ev->x > selmon->ww - (int)TEXTW(stext) && showstatus)
+			goto execute_handler;
+		}
+
+		x += bh;
+		for(i = 0; i < LENGTH(launchers); i++) {
+		    x += TEXTW(launchers[i].name);
+
+		    if (ev->x < x) {
+		    	 Arg a;
+		    	 a.v = launchers[i].command;
+		    	 spawn(&a);
+		    	 return;
+		    }
+		}
+
+
+		} else if (ev->x > selmon->ww - (int)TEXTW(stext) && showstatus)
 			click = ClkStatusText;
 		else if (showtitle)
 			click = ClkWinTitle;
-	} else if ((c = wintoclient(ev->window))) {
+	  else if ((c = wintoclient(ev->window))) {
 		focus(c);
 		restack(selmon);
 		XAllowEvents(dpy, ReplayPointer, CurrentTime);
 		click = ClkClientWin;
 	}
+
+execute_handler:
+
 	for (i = 0; i < LENGTH(buttons); i++)
 		if (click == buttons[i].click && buttons[i].func && buttons[i].button == ev->button
 		&& CLEANMASK(buttons[i].mask) == CLEANMASK(ev->state))
@@ -790,6 +815,13 @@
 		x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 	}
 
+		for (i = 0; i < LENGTH(launchers); i++) {
+
+		    w = TEXTW(launchers[i].name);
+		    drw_text(drw, x, 0, w, bh, lrpad / 2, launchers[i].name, urg & 1 << i);
+		    x += w;
+		}
+
 	if ((w = m->ww - tw - x) > bh) {
 		if (m->sel && showtitle) {
 			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
